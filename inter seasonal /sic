import numpy as np
import netCDF4
import matplotlib.pyplot as plt
from scipy import signal
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from mpl_toolkits.axes_grid1 import make_axes_locatable
from datetime import datetime
import matplotlib.ticker as mticker

# Load the SIC data
file_path_unfiltered = "C:/Users/Janki/Downloads/AVHRR_SST_SIC (2)/SST_ICE_regrid.nc"
sic_unfiltered = netCDF4.Dataset(file_path_unfiltered, 'r')

lat = sic_unfiltered.variables['yt_ocean'][:]
lon = sic_unfiltered.variables['xt_ocean'][:]
sic_values_unfiltered = sic_unfiltered.variables['ICE_REGRID'][:]
time_units = sic_unfiltered.variables['TIME'][:]

print("Time units shape:", time_units.shape)
print("Data shape:", sic_values_unfiltered.shape)


# Function to convert date to days since 1978-01-01
def days_since_1978(date):
    origin = datetime(1978, 1, 1)
    delta = date - origin
    return delta.days


# Function to apply Butterworth low-pass filter
def butterworth_lowpass_filter(data, cutoff_time, axis=0):
    cutoff_freq = 1 / cutoff_time
    nyquist_freq = 0.5
    normalized_cutoff_freq = cutoff_freq / nyquist_freq
    order = 4

    B, A = signal.butter(order, normalized_cutoff_freq, btype='low', analog=False, output='ba')
    filtered_data = signal.filtfilt(B, A, data, axis=axis)
    return filtered_data


def calculate_indices(year):
    dec_index = 365 * (year - 2000) + 334  # December 1st
    jan_index = 365 * (year - 2000 + 1)  # January 1st
    feb_index = 365 * (year - 2000 + 1) + 31  # February 1st
    return dec_index, jan_index, feb_index


# Define the range of years to plot
start_year = 2016
end_year = 2017

# Set up the figure and subplots
fig, axes = plt.subplots(nrows=end_year - start_year + 1, ncols=4, figsize=(25, 5 * (end_year - start_year + 1)),
                         subplot_kw={'projection': ccrs.Stereographic(central_longitude=0, central_latitude=-90)})

land_feature = cfeature.NaturalEarthFeature(
    'physical', 'land', '50m',
    edgecolor='black', facecolor='white')

# Color scale range
vmin = 0
vmax = 1

# Initialize lists to store the pcolormesh handles
pcms = []

# Loop through each year and plot the austral summer ICE average
for i, year in enumerate(range(start_year, end_year + 1)):
    dec_index, jan_index, feb_index = calculate_indices(year)

    # Extract data for the austral summer
    start_time_units = days_since_1978(datetime(year, 12, 1))
    end_time_units = days_since_1978(datetime(year + 1, 2, 28))

    mask_time = (time_units >= start_time_units) & (time_units <= end_time_units)
    sic_values_unfiltered_year = sic_values_unfiltered[mask_time, :, :]


    # Adjust sic_400daylow indexing to match the time dimension of sic_values_unfiltered_year

    print(f"Year {year} - Shape of extracted data:", sic_values_unfiltered_year.shape)

    if sic_values_unfiltered_year.shape[0] == 0:
        print(f"No data available for year {year}.")
        continue

    # Apply Butterworth low-pass filters
    sic_150daylow = butterworth_lowpass_filter(sic_values_unfiltered_year, 150, axis=0)
    #sic_400daylow= butterworth_lowpass_filter(sic_values_unfiltered, 400, axis=0 )



    sic_400daylow = butterworth_lowpass_filter(sic_values_unfiltered, 400, axis=0)
    sic_400daylow = np.ma.mean([sic_400daylow[dec_index, :, :],
                                         sic_400daylow[jan_index, :, :],
                                         sic_400daylow[feb_index, :, :]], axis=0)


    # Create a mask to hide regions above -60Â° latitude
    mask = np.where(lat < -60, 1, np.nan)
    sic_400daylow = sic_400daylow * mask[:, np.newaxis]

    # Calculate components
    sic_150dayhigh = sic_values_unfiltered_year - sic_150daylow  # Intraseasonal
    sic_bandpass = sic_150dayhigh - (sic_400daylow - sic_values_unfiltered_year)  # Seasonal
    sic_interannual = sic_400daylow  # Interannual

    # Mask out the extra region
    mask = np.where(lat[:, np.newaxis] <= -60, 1, np.nan)
    mask = np.broadcast_to(mask, sic_values_unfiltered_year.shape[1:])

    # Applying mask across the data
    sic_values_unfiltered_year = np.where(np.isnan(mask), np.nan, sic_values_unfiltered_year)
    sic_150dayhigh = np.where(np.isnan(mask), np.nan, sic_150dayhigh)
    sic_bandpass = np.where(np.isnan(mask), np.nan, sic_bandpass)
    sic_interannual = np.where(np.isnan(mask), np.nan, sic_interannual)

    sic_values_unfiltered_year[sic_values_unfiltered_year < 0] = 0
    sic_values_unfiltered_year[sic_values_unfiltered_year > 1] = 1

    sic_150dayhigh[sic_150dayhigh < 0] = 0
    sic_150dayhigh[sic_150dayhigh > 1] = 1

    sic_bandpass[sic_bandpass < 0] = 0
    sic_bandpass[sic_bandpass > 1] = 1

    sic_interannual[sic_interannual < 0] = 0
    sic_interannual[sic_interannual > 1] = 1

    sic_values_unfiltered_year = np.clip(sic_values_unfiltered_year, 0, 1)
    sic_150dayhigh = np.clip(sic_150dayhigh, 0, 1)
    sic_bandpass = np.clip(sic_bandpass, 0, 1)
    sic_interannual = np.clip(sic_interannual, 0, 1)




    # Define titles for the plots
    titles = [
        f'Unfiltered SIC ({year})',
        'Intraseasonal',
        'Seasonal',
        'Interannual'
    ]

    # Plot each component for the current year
    for j, (data, title) in enumerate(
            zip(
                [
                    sic_values_unfiltered_year.mean(axis=0),
                    sic_150dayhigh.mean(axis=0),
                    sic_bandpass.mean(axis=0),
                    sic_interannual.mean(axis=0)
                ],
                titles
            )
    ):
        ax = axes[i, j]

        pcm = ax.pcolormesh(lon, lat, data, cmap='seismic', shading='auto', vmin=vmin, vmax=vmax,
                            transform=ccrs.PlateCarree())

        # Store the pcolormesh handles for the common colorbar
        pcms.append(pcm)

        for lon_line in [20, 90, 160, 230, 300]:
            ax.plot([lon_line, lon_line], [-90, -60], color='black', linestyle='-', transform=ccrs.PlateCarree())

        ax.add_feature(cfeature.COASTLINE)
        ax.set_extent([-180, 180, -90, -60], crs=ccrs.PlateCarree())
        ax.set_title(title, fontsize=12)

        ax.text(40, -80, '(IO)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(120, -80, '(PO)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(200, -60, '(RS)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(280, -60, '(BAS)', fontsize=10, color='black', transform=ccrs.PlateCarree())

        ax.text(20, -60, '(20)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(90, -60, '(90)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(160, -60, '(160)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(230, -60, '(230)', fontsize=10, color='black', transform=ccrs.PlateCarree())
        ax.text(300, -60, '(300)', fontsize=10, color='black', transform=ccrs.PlateCarree())

        gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True, linewidth=1.5, color='gray', alpha=0.5,
                          linestyle='--')
        gl.ylocator = mticker.FixedLocator([-90, -80, -70, -60])
        gl.xlines = False
        gl.ylabel_style = {'size': 12, 'color': 'black'}
        gl.xlabel_style = {'size': 12, 'color': 'black'}
        gl.xlines = False
        ax.set_xticks([])  # Completely remove any x-axis ticks and labels
        ax.set_yticks([])  # Completely remove any y-axis ticks and labels
        ax.axis('off')
        ax.add_feature(land_feature)

# Add a single common colorbar for all plots
cbar_ax = fig.add_axes([0.92, 0.15, 0.015, 0.7])  # Adjust the position and size of the colorbar
cbar = fig.colorbar(pcms[0], cax=cbar_ax, orientation='vertical', extend='both')
cbar.set_label('SIC  (%)', fontsize=12)
cbar.ax.tick_params(labelsize=10)

plt.tight_layout(rect=[0, 0, 0.9, 1])
plt.subplots_adjust(wspace=0.3, hspace=0.42,top=0.924)

plt.show()

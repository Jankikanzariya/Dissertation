import matplotlib.pyplot as plt
import numpy as np
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from mpl_toolkits.axes_grid1 import make_axes_locatable
import netCDF4
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.ticker as mticker

# Load SST data
file_path_1 = "C:/Users/Janki/Downloads/SST_ICE_regrid_400daylow.nc"
sst_data = netCDF4.Dataset(file_path_1, 'r')

lat = sst_data.variables['YT_OCEAN'][:]
lon = sst_data.variables['XT_OCEAN'][:]
sst_values = sst_data.variables['SST_400DAYLOW'][:]

# Function to calculate indices for December, January, and February of a given year
def calculate_indices(year):
    dec_index = 365 * (year - 2000) + 334   # December 1st
    jan_index = 365 * (year - 2000 + 1)     # January 1st
    feb_index = 365 * (year - 2000 + 1) + 31 # February 1st
    return dec_index, jan_index, feb_index

# Define the range of years
start_year = 2011
end_year = 2023

# Set up the figure and subplots
fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(20, 15), subplot_kw={'projection': ccrs.Stereographic(central_longitude=0, central_latitude=-90)})
axes = axes.flatten()

# Color scale range
vmin = -5
vmax = 5

# Load a land feature mask
land_feature = cfeature.NaturalEarthFeature(
    'physical', 'land', '50m',
    edgecolor='black', facecolor='white')

# Loop through each year and plot the austral summer SST average
for i, year in enumerate(range(start_year, end_year)):
    dec_index, jan_index, feb_index = calculate_indices(year)

    # Compute the austral summer average (December of the previous year, January and February of the current year)
    sst_austral_summer_avg = np.ma.mean([sst_values[dec_index, :, :],
                                         sst_values[jan_index, :, :],
                                         sst_values[feb_index, :, :]], axis=0)

    # Create a mask to hide regions above -60° latitude
    mask = np.where(lat < -60, 1, np.nan)
    sst_austral_summer_avg = sst_austral_summer_avg * mask[:, np.newaxis]

    # Plotting
    ax_sst = axes[i]
    pcm_sst = ax_sst.pcolormesh(lon, lat, sst_austral_summer_avg, cmap='seismic', shading='auto', vmin=vmin, vmax=vmax, transform=ccrs.PlateCarree())

    # Add coastlines
    ax_sst.add_feature(cfeature.COASTLINE)

    # Add longitude lines
    for lon_line in [20, 90, 160, 230, 300]:
        ax_sst.plot([lon_line, lon_line], [-90, -60], color='black', linestyle='-', transform=ccrs.PlateCarree())

    # Add labels for regions
    ax_sst.text(40, -80, '(IO)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(120, -80, '(PO)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(200, -60, '(RS)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(280, -60, '(BAS)', fontsize=10, color='black', transform=ccrs.PlateCarree())

    # Add longitude labels
    ax_sst.text(20, -60, '(20E)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(90, -60, '(90E)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(160, -60, '(160E)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(230, -60, '(230E)', fontsize=10, color='black', transform=ccrs.PlateCarree())
    ax_sst.text(300, -60, '(300E)', fontsize=10, color='black', transform=ccrs.PlateCarree())

    # Zoom into Antarctica by setting the extent
    ax_sst.set_extent([-180, 180, -90, -60], crs=ccrs.PlateCarree())

    # Add the land mask feature for Antarctica
    ax_sst.add_feature(land_feature)

    # Set the title for each subplot
    ax_sst.set_title(f'Austral Summer {year}-{year+1}', fontsize=10)

    # Add colorbar for SST
    divider_sst = make_axes_locatable(ax_sst)
    cax_sst = divider_sst.append_axes("right", size="5%", pad=0.1, axes_class=plt.Axes)
    fig.colorbar(pcm_sst, cax=cax_sst, extend='both', orientation='vertical').set_label('SST (°C)', fontsize=8)

# Gridlines
for ax in axes.flat:
    gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True, linewidth=1, color='gray', alpha=0.5, linestyle='--')
    gl.ylocator = mticker.FixedLocator([-80, -70, -60])
    gl.xlines = False
    ax.set_xticks([])
    ax.set_yticks([])
    ax.axis('off')

# Adjust layout and show plot
plt.tight_layout()
plt.show()

